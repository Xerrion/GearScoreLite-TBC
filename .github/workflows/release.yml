name: Create Release
permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v4.0.2-TBC)'
        required: true
        default: 'v4.0.2-TBC'

jobs:
  release:
    runs-on: ubuntu-latest
   
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_clean=${VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Validate addon files
      run: |
        # Check that required files exist
        required_files=(
          "GearScoreLite.lua"
          "GearScoreLite.toc"
          "informationLite.lua"
          "README.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Error: Required file $file not found"
            exit 1
          fi
        done
        
        echo "All required addon files found ✓"
        
    - name: Update TOC version
      run: |
        VERSION_CLEAN="${{ steps.version.outputs.version_clean }}"
        sed -i "s/## Version: .*/## Version: ${VERSION_CLEAN}/" GearScoreLite.toc
        echo "Updated TOC version to ${VERSION_CLEAN}"
        
    - name: Create addon package
      run: |
        # Create release directory structure
        mkdir -p release/GearScoreLite
        
        # Copy addon files
        cp *.lua release/GearScoreLite/
        cp *.toc release/GearScoreLite/
        cp README.md release/GearScoreLite/
        cp README-TBC.txt release/GearScoreLite/
        cp CHANGELOG.md release/GearScoreLite/
        
        # Create addon zip
        cd release
        zip -r "../GearScoreLite-TBC-${{ steps.version.outputs.version_clean }}.zip" GearScoreLite/
        cd ..
        
        echo "Created addon package: GearScoreLite-TBC-${{ steps.version.outputs.version_clean }}.zip"
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION_CLEAN="${{ steps.version.outputs.version_clean }}"

        # Extract only the changelog section for the current version from CHANGELOG.md
        CHANGELOG_CONTENT=$(awk -v ver="$VERSION_CLEAN" '
          /^## Version / {
            if (found) exit;               # Stop when we hit the next version header after finding our target
            if ($0 ~ "^## Version " ver) {
              found=1; next;               # Start capturing after the header line
            }
          }
          found { print }
        ' CHANGELOG.md)

        # Fallback message if no changelog section is found
        if [ -z "$CHANGELOG_CONTENT" ]; then
          CHANGELOG_CONTENT="No changelog entry found for version $VERSION_CLEAN."
        fi

        cat > release_notes.md << EOF
        # GearScoreLite TBC Edition – v$VERSION_CLEAN

        $CHANGELOG_CONTENT
        EOF

        echo "Generated release notes for version $VERSION_CLEAN"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: GearScoreLite TBC Edition ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: |
          GearScoreLite-TBC-${{ steps.version.outputs.version_clean }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload addon as artifact
      uses: actions/upload-artifact@v4
      with:
        name: GearScoreLite-TBC-${{ steps.version.outputs.version_clean }}
        path: release/GearScoreLite/
        retention-days: 90
